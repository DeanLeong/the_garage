{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/deanleong/General_Assembly/phoenix/unit_4/the_garage/client/src/screens/NotesEdit.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './NotesEdit.css';\nimport { postMaintenance_note, getAllMaintenance_notes, destroyMaintenance_note, putMaintenance_note } from '../services/maintenance_notes';\nimport { Link, Redirect, useParams, useHistory } from 'react-router-dom';\n\nfunction NotesEdit(props) {\n  _s();\n\n  console.log(props);\n  const [notes, setNotes] = useState([]);\n  const [isLoaded, setLoaded] = useState(null);\n  const [isUpdated, setUpdated] = useState(false);\n  const [maintenance_notes, setMaintenance_notes] = useState({\n    content: ''\n  });\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  useEffect(() => {\n    if (props.maintenance_notes.length) {\n      const getNotes = props.maintenance_notes.filter(note => note.motorcycle_id === Number(id));\n      setNotes(getNotes);\n      setLoaded(true);\n      console.log(notes);\n    }\n  }, [id]);\n  console.log(notes);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setNotes({ ...notes,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    let {\n      id\n    } = props.match.params;\n    const updated = await putMaintenance_note(id, notes);\n    setUpdated(updated);\n  };\n\n  if (isUpdated) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `/motorcycles/:id/notesdetail`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n\n  const maintenance_notehandleUpdate = async (id, maintenance_noteData) => {\n    const updatedMaintenance_note = await putMaintenance_note(id, maintenance_noteData);\n    setMaintenance_notes(prevState => prevState.map(maintenance_note => {\n      return maintenance_note.id === Number(id) ? updatedMaintenance_note : maintenance_note;\n    }));\n    history.push('/maintenance_notes');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notes-edit-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit your comment! DO IT!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"edit-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"edit-label\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Content:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"edit-input\",\n          placeholder: notes.content,\n          value: notes.content,\n          name: \"note\",\n          required: true,\n          autoFocus: true,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"basic-button\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NotesEdit, \"Y6z7VvfPoONQftKo71FNOJzqXz0=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = NotesEdit;\nexport default NotesEdit;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotesEdit\");","map":{"version":3,"sources":["/Users/deanleong/General_Assembly/phoenix/unit_4/the_garage/client/src/screens/NotesEdit.jsx"],"names":["React","useEffect","useState","postMaintenance_note","getAllMaintenance_notes","destroyMaintenance_note","putMaintenance_note","Link","Redirect","useParams","useHistory","NotesEdit","props","console","log","notes","setNotes","isLoaded","setLoaded","isUpdated","setUpdated","maintenance_notes","setMaintenance_notes","content","id","history","length","getNotes","filter","note","motorcycle_id","Number","handleChange","event","name","value","target","handleSubmit","preventDefault","match","params","updated","maintenance_notehandleUpdate","maintenance_noteData","updatedMaintenance_note","prevState","map","maintenance_note","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './NotesEdit.css'\nimport { postMaintenance_note, getAllMaintenance_notes, destroyMaintenance_note, putMaintenance_note } from '../services/maintenance_notes';\nimport {Link, Redirect, useParams, useHistory} from 'react-router-dom'\n\nfunction NotesEdit(props) {\n  console.log(props)\n  const [notes, setNotes] = useState([])\n  const [isLoaded, setLoaded] = useState(null)\n  const [isUpdated, setUpdated] = useState(false)\n  const [maintenance_notes, setMaintenance_notes] = useState({\n    content: '',\n  })\n  const { id } = useParams()\n  const history = useHistory()\n\n  useEffect(() => {\n    if (props.maintenance_notes.length) {\n      const getNotes = props.maintenance_notes.filter((note) => note.motorcycle_id === Number(id))\n      setNotes(getNotes)\n      setLoaded(true)\n      console.log(notes)\n    }\n  }, [id])\n\n  console.log(notes)\n\n  const handleChange = (event) => {\n    const { name, value } = event.target\n    setNotes({\n      ...notes,\n      [name]: value\n    })\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    let { id } = props.match.params\n    const updated = await putMaintenance_note(id, notes)\n    setUpdated(updated)\n  }\n\n  if (isUpdated) {\n    return <Redirect to={`/motorcycles/:id/notesdetail`} />\n  }\n\n  const maintenance_notehandleUpdate = async (id, maintenance_noteData) => {\n    const updatedMaintenance_note = await putMaintenance_note(id, maintenance_noteData)\n    setMaintenance_notes(prevState => prevState.map(maintenance_note => {\n      return maintenance_note.id === Number(id) ? updatedMaintenance_note : maintenance_note\n    }))\n    history.push('/maintenance_notes')\n  }\n \n  return (\n    <div className='notes-edit-container'>\n      <h1>Edit your comment! DO IT!</h1>\n      {\n        <form className=\"edit-form\" onSubmit={handleSubmit}>\n          <label className=\"edit-label\">\n            <div>Content:</div>\n            <textarea\n              className=\"edit-input\"\n              placeholder={notes.content}\n              value={notes.content}\n              name=\"note\"\n              required\n              autoFocus\n              onChange={handleChange}\n              />\n          </label>\n          <button type='submit' className=\"basic-button\">Save</button>\n        </form>\n      }\n    </div>\n  );\n}\n\nexport default NotesEdit;"]},"metadata":{},"sourceType":"module"}